{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/corona2.png","App.js","reportWebVitals.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","cariant","url","fetchData","country","a","changableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountryData","countries","countryData","name","Chart","useState","setDailyData","useEffect","fetchApiData","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39fcf30a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import { React } from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography color=\"textSecondary\" gutterBottom></Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2}\n                separator=\",\"\n              ></CountUp>\n            </Typography>\n            <Typography color=\"textSecondary\" gutterBottom>\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography cariant=\"body2\">\n              Number of Active Cases of Covid 19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography color=\"textSecondary\" gutterBottom></Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2}\n                separator=\",\"\n              ></CountUp>\n            </Typography>\n            <Typography color=\"textSecondary\" gutterBottom>\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography cariant=\"body2\">\n              Number of Recovered Cases of Covid 19{\" \"}\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          md={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography color=\"textSecondary\" gutterBottom></Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2}\n                separator=\",\"\n              ></CountUp>\n            </Typography>\n            <Typography color=\"textSecondary\" gutterBottom>\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography cariant=\"body2\">\n              Number of Death Cases of Covid 19{\" \"}\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  try {\n    let changableUrl = url;\n    if (country) {\n      changableUrl = `${url}/countries/${country}`;\n    }\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\n\nexport const fetchCountryData = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(`${url}/countries`);\n\n    const modifiedData = countries.map((countryData) => countryData.name);\n\n    return modifiedData;\n  } catch (error) {}\n};\n","import { React, useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchApiData = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchApiData();\n  }, [setDailyData]);\n  console.log(dailyData);\n\n  const lineChart =\n    dailyData && dailyData.length ? (\n      <Line\n        data={{\n          labels: dailyData.map(({ date }) => date),\n          datasets: [\n            {\n              data: dailyData.map(({ confirmed }) => confirmed),\n              label: \"Infected\",\n              borderColor: \"#3333ff\",\n              fill: true,\n            },\n\n            {\n              data: dailyData.map(({ deaths }) => deaths),\n              label: \"Deaths\",\n              borderColor: \"red\",\n              backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n              fill: true,\n            },\n          ],\n        }}\n      />\n    ) : null;\n\n  const barChart = country ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            data: [confirmed.value, recovered.value, deaths.value],\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0,0,255,0.5)\",\n              \"rgba(0,255,0,0.5)\",\n              \"rgba(255,0,0,0.5)\",\n            ],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current State in ${country}` },\n      }}\n    ></Bar>\n  ) : null;\n\n  return (\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport { fetchCountryData } from \"../../api\";\nimport styles from \"./CountryPicker.module.css\";\n\nconst CountryPicker = ({ handleCountryChange }) => {\n  const [fetchedCountries, setFetchedCountries] = useState([]);\n  useEffect(() => {\n    const fetchApiData = async () => {\n      setFetchedCountries(await fetchCountryData());\n    };\n\n    fetchApiData();\n  }, [setFetchedCountries]);\n\n  return (\n    <div>\n      <FormControl className={styles.formControl}>\n        <h4> Select Country</h4>{\" \"}\n        <NativeSelect\n          defaultValue=\"\"\n          onChange={(e) => {\n            handleCountryChange(e.target.value);\n          }}\n        >\n          <option value=\"\">Global</option>\n          {fetchedCountries.map((country, i) => (\n            <option key={i} value={country}>\n              {country}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CountryPicker;\n","export default __webpack_public_path__ + \"static/media/corona2.7dfb9b6f.png\";","import React from \"react\";\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\nimport coronaImage from \"./images/corona2.png\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n\n    return (\n      <div className={styles.container}>\n        <h4>UPDATES ON COVID-19</h4>\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\"></img>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n        <h4>Built by Abhishek</h4>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}